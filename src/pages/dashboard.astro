---
// src/pages/dashboard.astro
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
---

<Layout 
    title="Aspirasi Dashboard | Website Dusun Bedalo"
    description="Dashboard interaktif untuk menampilkan data aspirasi warga Dusun Bedalo."
>
    <div id="login-overlay" class="fixed inset-0 z-[2000] flex items-center justify-center bg-slate-900/50 backdrop-blur-md transition-opacity duration-500">
        <div class="w-full max-w-sm p-4">
            <form id="login-form" class="rounded-xl bg-white p-8 shadow-2xl">
                <h2 class="mb-2 text-center text-2xl font-bold text-slate-800">Enter Dashboard</h2>
                <p class="mb-6 text-center text-sm text-slate-500">A password is required to view this page.</p>
                <div class="mb-4">
                    <label for="password-input" class="sr-only">Password</label>
                    <input type="password" id="password-input" placeholder="Password" class="w-full rounded-lg border border-slate-300 px-4 py-2 text-center transition-all focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500" required>
                </div>
                <button type="submit" class="w-full rounded-lg bg-indigo-600 py-2.5 text-sm font-semibold text-white transition-colors hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                    Continue
                </button>
                <p id="error-message" class="mt-4 h-4 text-center text-sm text-red-500"></p>
            </form>
        </div>
    </div>

    <div id="dashboard-content" class="blur-sm transition-all duration-500 pointer-events-none">
        <div class="flex min-h-screen flex-col font-inter bg-slate-50 text-slate-800">
            <header class="sticky top-0 z-50 bg-slate-50/80 p-4 shadow-sm backdrop-blur-lg">
                 <div class="mx-auto max-w-5xl">
                    <div class="flex items-center justify-between">
                        <h1 class="text-2xl font-extrabold tracking-tight text-indigo-600">Aspirasi Bedalo</h1>
                        <div class="flex items-center gap-2">
                             <button id="refresh-button" class="flex items-center justify-center gap-2 rounded-lg bg-indigo-500 px-4 py-2 text-sm font-medium text-white shadow-md transition-all duration-200 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 active:scale-95">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.664 0l3.18-3.185m-3.181 9.348a8.25 8.25 0 00-11.664 0l-3.18 3.185m3.181-9.348L2.985 19.644" /></svg>
                                <span class="hidden sm:inline">Refresh</span>
                            </button>
                            <button id="burger-btn" class="group h-10 w-10 rounded-lg p-2 transition-colors hover:bg-slate-200 md:hidden">
                                <div class="space-y-1.5">
                                    <span class="block h-0.5 w-full transform rounded-full bg-slate-700 transition-transform duration-300 ease-in-out group-[.is-open]:translate-y-2 group-[.is-open]:rotate-45"></span>
                                    <span class="block h-0.5 w-full rounded-full bg-slate-700 transition-opacity duration-300 ease-in-out group-[.is-open]:opacity-0"></span>
                                    <span class="block h-0.5 w-full transform rounded-full bg-slate-700 transition-transform duration-300 ease-in-out group-[.is-open]:-translate-y-2 group-[.is-open]:-rotate-45"></span>
                                </div>
                            </button>
                        </div>
                    </div>

                    <div id="mobile-menu" class="grid grid-rows-[0fr] transition-[grid-template-rows] duration-500 ease-in-out md:grid-rows-[1fr] md:pt-4">
                        <div class="overflow-hidden">
                            <div class="mt-4 flex flex-col gap-4 border-t border-slate-200 pt-4 md:mt-0 md:border-t-0 md:pt-0">
                                <div class="relative">
                                    <svg class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>
                                    <input type="text" id="search-input" placeholder="Search aspirations..." class="w-full rounded-lg border border-slate-300 bg-white py-2 pl-10 pr-4 text-sm transition-all focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                </div>
                                <div>
                                    <span class="text-xs font-semibold text-slate-500 mr-2">Group by:</span>
                                    <div class="inline-flex flex-wrap gap-2">
                                        <button class="group-by-btn rounded-full px-3 py-1 text-xs font-semibold transition-colors duration-200 bg-indigo-600 text-white" data-group-by="none">None</button>
                                        <button class="group-by-btn rounded-full px-3 py-1 text-xs font-semibold transition-colors duration-200 bg-slate-200 text-slate-600 hover:bg-slate-300" data-group-by="date">Date</button>
                                        <button class="group-by-btn rounded-full px-3 py-1 text-xs font-semibold transition-colors duration-200 bg-slate-200 text-slate-600 hover:bg-slate-300" data-group-by="week">Week</button>
                                        <button class="group-by-btn rounded-full px-3 py-1 text-xs font-semibold transition-colors duration-200 bg-slate-200 text-slate-600 hover:bg-slate-300" data-group-by="month">Month</button>
                                        <button class="group-by-btn rounded-full px-3 py-1 text-xs font-semibold transition-colors duration-200 bg-slate-200 text-slate-600 hover:bg-slate-300" data-group-by="year">Year</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
            
            <main class="flex-1 p-4">
                 <div class="mx-auto max-w-5xl">
                    <div class="mb-8 rounded-xl border border-slate-200 bg-white p-4 shadow-sm" data-aos="fade-down">
                        <h3 class="text-lg font-bold text-slate-800">Monthly Aspirations</h3>
                        <p class="text-sm text-slate-500 mb-4">Overview of submissions this year.</p>
                        <div class="relative h-64">
                             <canvas id="aspirasi-chart"></canvas>
                        </div>
                    </div>

                    <div class="mb-6 flex items-baseline justify-between border-b border-slate-200 pb-2">
                        <h2 class="text-2xl font-bold text-slate-900 leading-tight">Feed</h2>
                        <p id="total-count" class="text-sm text-slate-500"></p>
                    </div>
                    
                    <div id="aspirasi-container" class="space-y-4 min-h-[400px]">
                        </div>
                    
                    <div id="pagination-controls" class="mt-8 flex items-center justify-center gap-4">
                        <button id="prev-button" class="flex items-center gap-2 rounded-lg bg-white px-4 py-2 text-sm font-semibold text-slate-700 shadow-sm ring-1 ring-inset ring-slate-300 transition-colors hover:bg-slate-50 disabled:cursor-not-allowed disabled:opacity-50">
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" /></svg>
                            Previous
                        </button>
                        <span id="page-indicator" class="text-sm font-medium text-slate-600"></span>
                        <button id="next-button" class="flex items-center gap-2 rounded-lg bg-white px-4 py-2 text-sm font-semibold text-slate-700 shadow-sm ring-1 ring-inset ring-slate-300 transition-colors hover:bg-slate-50 disabled:cursor-not-allowed disabled:opacity-50">
                            Next
                            <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" /></svg>
                        </button>
                    </div>
                </div>
            </main>
            <Footer />
        </div>
        <div id="notification-toast" class="fixed bottom-5 inset-x-0 z-[1001] mx-auto w-fit max-w-xs rounded-lg bg-slate-900 px-4 py-3 text-center text-sm font-medium text-white shadow-lg transition-all duration-300 translate-y-20 opacity-0">
            Contact info copied!
        </div>
    </div>
</Layout>

    <!-- Import required JS libraries via CDN -->
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
    <style is:global>
    @import 'aos/dist/aos.css';

<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
    .font-inter { font-family: 'Inter', sans-serif; }
    .whitespace-pre-wrap { white-space: pre-wrap; }
    .card-content { display: grid; grid-template-rows: 0fr; transition: grid-template-rows 0.4s ease-in-out; }
    .card.is-open .card-content { grid-template-rows: 1fr; }
    .card-content > div { overflow: hidden; }
    .card.is-open .chevron-icon { transform: rotate(180deg); }
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    .shake {
        animation: shake 0.5s ease-in-out;
    }
</style>

<script>
    // Libraries loaded via CDN in the HTML head
    // gsap, AOS, and chart.js are available globally
    const { gsap } = window;
    const { Chart, ChartItem } = window;
    const AOS = window.AOS;

    // --- Type Definitions ---
    interface Aspirasi {
        "Timestamp": string;
        "Nama Lengkap": string;
        "No. Telepon / Email": string;
        "Subjek": string;
        "Pesan Aspirasi": string;
        [key: string]: any;
    }
    type GroupByOption = 'none' | 'date' | 'week' | 'month' | 'year';
    
    // Add a custom function to the global Window type for type safety
    declare global {
        interface Window {
            copyToClipboard: (text: string) => Promise<void>;
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // --- Authentication Elements & Logic ---
        const loginOverlay = document.getElementById('login-overlay') as HTMLDivElement;
        const loginForm = document.getElementById('login-form') as HTMLFormElement;
        const passwordInput = document.getElementById('password-input') as HTMLInputElement;
        const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;
        const dashboardContent = document.getElementById('dashboard-content') as HTMLDivElement;
        
        const CORRECT_HASH = '7507bd70afee4af962b9fe14f7897f2ac3037e46e040f50ffab74b8a273c28e7';

        async function sha256(str: string): Promise<string> {
            const buffer = new TextEncoder().encode(str);
            const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        }

        function unlockDashboard() {
            loginOverlay.classList.add('opacity-0', 'pointer-events-none');
            dashboardContent.classList.remove('blur-sm', 'pointer-events-none');
            initializeDashboard();
        }

        if (sessionStorage.getItem('isAuthenticated') === 'true') {
            unlockDashboard();
        }

        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const inputPassword = passwordInput.value.trim();
            
            // --- DEBUGGING CONSOLE LOGS ---
            console.log("Input after trim:", `"${inputPassword}"`); // Log the input to check for whitespace issues.
            
            const inputHash = await sha256(inputPassword);
            
            console.log("Generated hash from input:", inputHash); // This is the hash from what you typed.
            console.log("Correct hash to match:", CORRECT_HASH); // This is the hash we expect.
            console.log("Do hashes match?", inputHash === CORRECT_HASH); // This should be true for the correct password.
            // --- END OF DEBUGGING ---

            if (inputHash === CORRECT_HASH) {
                console.log("Login successful!");
                sessionStorage.setItem('isAuthenticated', 'true');
                unlockDashboard();
            } else {
                console.error("Login failed: Hashes do not match.");
                errorMessage.textContent = 'Incorrect password.';
                loginForm.classList.add('shake');
                passwordInput.value = '';
                setTimeout(() => {
                    loginForm.classList.remove('shake');
                    errorMessage.textContent = '';
                }, 1000);
            }
        });

        // --- Dashboard Initialization ---
        function initializeDashboard() {
            AOS.init({ duration: 600, once: true, offset: 50 });

            const burgerBtn = document.getElementById('burger-btn') as HTMLButtonElement;
            const mobileMenu = document.getElementById('mobile-menu') as HTMLDivElement;
            const aspirasiContainer = document.getElementById('aspirasi-container') as HTMLDivElement;
            const refreshButton = document.getElementById('refresh-button') as HTMLButtonElement;
            const searchInput = document.getElementById('search-input') as HTMLInputElement;
            const groupByButtons = document.querySelectorAll('.group-by-btn') as NodeListOf<HTMLButtonElement>;
            const totalCountElement = document.getElementById('total-count') as HTMLParagraphElement;
            const notificationToast = document.getElementById('notification-toast') as HTMLDivElement;
            const chartCanvas = document.getElementById('aspirasi-chart') as HTMLCanvasElement;
            const paginationControls = document.getElementById('pagination-controls') as HTMLDivElement;
            const prevButton = document.getElementById('prev-button') as HTMLButtonElement;
            const nextButton = document.getElementById('next-button') as HTMLButtonElement;
            const pageIndicator = document.getElementById('page-indicator') as HTMLSpanElement;

            const scriptUrl = 'https://script.google.com/macros/s/AKfycbwSKLz61pECBMKyYqr72knvY9p65vt945pkmRPl9HPIyRjYRom3IgmInBrS8lMGfSst/exec';
            let fetchedData: Aspirasi[] = [];
            let currentGroupBy: GroupByOption = 'none';
            let aspirasiChart: Chart | null = null;
            let currentPage = 1;
            const itemsPerPage = 6;

            function renderChart(data: Aspirasi[]) {
                const currentYear = new Date().getFullYear();
                const monthlyCounts = Array(12).fill(0);
                data.forEach((item: Aspirasi) => {
                    const date = new Date(item.Timestamp);
                    if (date.getFullYear() === currentYear) { monthlyCounts[date.getMonth()]++; }
                });
                const chartData = {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    datasets: [{
                        label: 'Submissions',
                        data: monthlyCounts,
                        backgroundColor: 'rgba(79, 70, 229, 0.6)',
                        borderColor: 'rgba(79, 70, 229, 1)',
                        borderWidth: 2,
                        borderRadius: 4,
                    }]
                };
                if (aspirasiChart) aspirasiChart.destroy();
                aspirasiChart = new Chart(chartCanvas as ChartItem, {
                    type: 'bar',
                    data: chartData,
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        scales: { y: { beginAtZero: true, grid: { color: '#e2e8f0' }, ticks: { precision: 0 }}, x: { grid: { display: false }}},
                        plugins: { legend: { display: false }, tooltip: { backgroundColor: '#0f172a', titleFont: { weight: 'bold' }, bodyFont: { size: 14 }, padding: 12, cornerRadius: 6 }}
                    }
                });
            }

            function showSkeleton(count = 5) {
                let skeletonHtml = '';
                for (let i = 0; i < count; i++) {
                    skeletonHtml += `<div class="w-full animate-pulse rounded-lg border border-slate-200 bg-white p-4"><div class="mb-3 h-5 w-3/4 rounded bg-slate-200"></div><div class="h-4 w-1/2 rounded bg-slate-200"></div></div>`;
                }
                aspirasiContainer.innerHTML = skeletonHtml;
            }

            function formatDate(timestamp: string): string {
                const date = new Date(timestamp);
                return date.toLocaleString('id-ID', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
            }

            function getWeekNumber(d: Date): number {
                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
                d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
                const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
                return Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1) / 7);
            }

            function groupData(data: Aspirasi[], groupBy: GroupByOption): Record<string, Aspirasi[]> {
                if (groupBy === 'none') return { 'All Aspirations': data };
                return data.reduce((acc: Record<string, Aspirasi[]>, item: Aspirasi) => {
                    const date = new Date(item.Timestamp);
                    let key = '';
                    if (groupBy === 'date') key = date.toLocaleDateString('id-ID', { day: '2-digit', month: 'long', year: 'numeric' });
                    else if (groupBy === 'week') key = `Week ${getWeekNumber(date)}, ${date.getFullYear()}`;
                    else if (groupBy === 'month') key = date.toLocaleDateString('id-ID', { month: 'long', year: 'numeric' });
                    else if (groupBy === 'year') key = date.getFullYear().toString();
                    if (!acc[key]) acc[key] = [];
                    acc[key].push(item);
                    return acc;
                }, {});
            }

            async function copyToClipboard(text: string): Promise<void> {
                try {
                    await navigator.clipboard.writeText(text);
                    notificationToast.textContent = 'Contact info copied!';
                } catch (err) {
                    console.error('Failed to copy text: ', err);
                    notificationToast.textContent = 'Failed to copy text.';
                } finally {
                    gsap.fromTo(notificationToast, { y: 80, opacity: 0 }, { y: 0, opacity: 1, duration: 0.5, ease: 'power3.out', onComplete: () => {
                        gsap.to(notificationToast, { y: 80, opacity: 0, duration: 0.5, ease: 'power3.in', delay: 2 });
                    }});
                }
            }
            window.copyToClipboard = copyToClipboard;

            function renderData(groupedData: Record<string, Aspirasi[]>) {
                aspirasiContainer.innerHTML = '';
                if (Object.keys(groupedData).length === 0) return;
                const groupKeys = Object.keys(groupedData).sort((a: string, b: string) => new Date(b).getTime() - new Date(a).getTime() || b.localeCompare(a));
                groupKeys.forEach(key => {
                    const items = groupedData[key].sort((a: Aspirasi, b: Aspirasi) => new Date(b.Timestamp).getTime() - new Date(a.Timestamp).getTime());
                    if (currentGroupBy !== 'none') {
                        const groupHeader = document.createElement('div');
                        groupHeader.className = 'flex items-center space-x-3 text-slate-700 mb-2';
                        groupHeader.innerHTML = `<h3 class="text-lg font-bold">${key} <span class="text-sm font-normal text-slate-500">(${items.length})</span></h3>`;
                        aspirasiContainer.appendChild(groupHeader);
                    }
                    items.forEach((item: Aspirasi) => {
                        const card = document.createElement('div');
                        card.className = 'card bg-white p-4 rounded-lg border border-slate-200 shadow-sm overflow-hidden';
                        card.setAttribute('data-aos', 'fade-up');
                        const namaLengkap = item['Nama Lengkap'] || 'Anonymous';
                        const noTelepon = item['No. Telepon / Email'] || 'N/A';
                        const subjek = item['Subjek'] || 'No Subject';
                        const pesanAspirasi = item['Pesan Aspirasi'] || 'No message provided.';
                        const timestamp = item['Timestamp'] ? formatDate(item['Timestamp']) : 'N/A';
                        card.innerHTML = `
                            <div class="card-header cursor-pointer flex items-center justify-between">
                                <div class="flex-1 min-w-0"><h4 class="text-md font-bold text-slate-800 truncate">${subjek}</h4><p class="text-sm text-slate-500">By: ${namaLengkap}</p></div>
                                <div class="flex items-center gap-4 ml-4"><span class="text-xs text-slate-400 whitespace-nowrap">${timestamp.split(',')[0]}</span><svg class="chevron-icon h-5 w-5 text-slate-400 transition-transform duration-300" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" /></svg></div>
                            </div>
                            <div class="card-content"><div><div class="w-full h-px bg-slate-200 my-3"></div><p class="text-sm text-slate-600 mb-4 whitespace-pre-wrap break-words">${pesanAspirasi}</p><button class="flex items-center gap-2 text-sm text-slate-500 hover:text-indigo-600 transition-colors" onclick="window.copyToClipboard('${noTelepon}')"><svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 01-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 00-1.091-.852H4.5A2.25 2.25 0 002.25 4.5v2.25z" /></svg><span>Contact: ${noTelepon}</span></button></div></div>`;
                        aspirasiContainer.appendChild(card);
                    });
                });
                AOS.refresh();
            }

            function updatePaginationControls(totalItems: number) {
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                if (totalPages <= 1) {
                    paginationControls.style.display = 'none';
                    return;
                }
                paginationControls.style.display = 'flex';
                pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
                prevButton.disabled = currentPage === 1;
                nextButton.disabled = currentPage === totalPages;
            }

            function filterAndRenderData() {
                const searchTerm = searchInput.value.toLowerCase();
                const filteredData = fetchedData.filter((item: Aspirasi) => Object.values(item).some(value => String(value).toLowerCase().includes(searchTerm)));
                const totalFilteredItems = filteredData.length;
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage, totalFilteredItems);
                const paginatedData = filteredData.slice(startIndex, endIndex);

                if (totalFilteredItems > 0) {
                    totalCountElement.textContent = `Showing ${startIndex + 1}–${endIndex} of ${totalFilteredItems} total`;
                } else {
                    totalCountElement.textContent = `Showing 0 of ${fetchedData.length} total`;
                }
                
                if (totalFilteredItems === 0) {
                    aspirasiContainer.innerHTML = `<div class="text-center py-10"><p class="text-slate-500 text-lg">No matching aspirations found.</p></div>`;
                    updatePaginationControls(0);
                    return;
                }

                const groupedData = groupData(paginatedData, currentGroupBy);
                renderData(groupedData);
                updatePaginationControls(totalFilteredItems);
            }
            
            async function fetchAndRenderData() {
                showSkeleton();
                refreshButton.disabled = true;
                gsap.to(refreshButton.querySelector('svg'), { rotate: 360, duration: 1, repeat: -1, ease: 'none' });
                try {
                    const response = await fetch(scriptUrl);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    fetchedData = await response.json();
                    currentPage = 1;
                    filterAndRenderData();
                    renderChart(fetchedData);
                } catch (error) {
                    console.error('Error fetching aspirasi data:', error);
                    aspirasiContainer.innerHTML = `<div class="text-center py-10"><p class="text-red-500 text-lg">Failed to load data. Please try again.</p></div>`;
                } finally {
                    refreshButton.disabled = false;
                    gsap.killTweensOf(refreshButton.querySelector('svg'));
                    gsap.to(refreshButton.querySelector('svg'), { rotate: 0, duration: 0.5 });
                }
            }
            
            burgerBtn.addEventListener('click', () => {
                burgerBtn.classList.toggle('is-open');
                mobileMenu.classList.toggle('grid-rows-[1fr]');
                mobileMenu.classList.toggle('grid-rows-[0fr]');
            });

            refreshButton.addEventListener('click', fetchAndRenderData);

            searchInput.addEventListener('input', () => {
                currentPage = 1;
                filterAndRenderData();
            });

            groupByButtons.forEach(button => {
                button.addEventListener('click', (e: MouseEvent) => {
                    currentPage = 1;
                    const target = e.currentTarget as HTMLButtonElement;
                    currentGroupBy = target.dataset.groupBy as GroupByOption;
                    groupByButtons.forEach(btn => {
                        btn.classList.toggle('bg-indigo-600', btn === target);
                        btn.classList.toggle('text-white', btn === target);
                        btn.classList.toggle('bg-slate-200', btn !== target);
                        btn.classList.toggle('text-slate-600', btn !== target);
                    });
                    filterAndRenderData();
                });
            });

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    filterAndRenderData();
                    window.scrollTo(0, 0);
                }
            });

            nextButton.addEventListener('click', () => {
                const totalPages = Math.ceil(fetchedData.filter((item: Aspirasi) => Object.values(item).some(value => String(value).toLowerCase().includes(searchInput.value.toLowerCase()))).length / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    filterAndRenderData();
                    window.scrollTo(0, 0);
                }
            });

            aspirasiContainer.addEventListener('click', (e: MouseEvent) => {
                const target = e.target as HTMLElement;
                const card = target.closest('.card');
                if (card?.querySelector('.card-header')?.contains(target)) {
                    card.classList.toggle('is-open');
                }
            });

            fetchAndRenderData();
        }
    });
</script>