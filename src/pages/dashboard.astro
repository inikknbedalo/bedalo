---
// src/pages/dashboard.astro

// 1. Use your existing Layout for a consistent look and feel.
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
---
<Layout 
    title="Aspirasi Dashboard | Website Dusun Bedalo"
    description="Dashboard untuk menampilkan data aspirasi yang dikirimkan oleh warga Dusun Bedalo."
>
    {/* ... (The HTML part of your component remains the same) ... */}
    <div class="flex min-h-screen font-inter bg-gray-100 text-gray-800">

        {/* Loading Modal Overlay */}
        <div id="loading-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 z-[1000] items-center justify-center transition-opacity duration-300 hidden">
            <div class="flex flex-col items-center p-8 bg-white rounded-xl shadow-2xl">
                <div class="w-16 h-16 border-4 border-indigo-200 border-t-indigo-500 rounded-full animate-spin"></div>
                <p class="mt-4 text-lg font-semibold text-gray-700">Loading Data...</p>
            </div>
        </div>

        {/* Sidebar Overlay for mobile */}
        <div id="sidebar-overlay" class="fixed inset-0 bg-black opacity-0 transition-opacity duration-300 pointer-events-none md:hidden"></div>

        {/* Sidebar */}
        <aside id="sidebar" class="sidebar fixed inset-y-0 left-0 bg-white shadow-lg p-6 flex-col z-50 md:sticky md:flex md:transform-none hidden">
            <div class="flex items-center justify-between mb-8">
                <h1 class="text-2xl font-extrabold text-indigo-600 tracking-tight">Aspirasi Bedalo</h1>
                <button id="sidebar-close-btn" class="text-gray-400 hover:text-gray-600 md:hidden">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>

            <div class="mb-6 space-y-4">
                <div class="relative">
                    <i class="fas fa-search absolute left-4 top-1/2 -translate-y-1/2 text-gray-400"></i>
                    <input type="text" id="search-input" placeholder="Search aspirations..." class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all text-sm">
                </div>
                <button id="refresh-button" class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-pink-500 text-white rounded-lg shadow-md hover:bg-pink-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-offset-2 text-sm">
                    <i class="fas fa-sync-alt"></i>
                    <span class="font-medium">Refresh Data</span>
                </button>
            </div>

            <div class="mb-8">
                <span class="text-sm font-semibold text-gray-500 mb-2 block">Group by:</span>
                <div class="flex flex-wrap gap-2">
                    <button class="group-by-btn text-xs font-semibold px-4 py-2 rounded-full transition-colors duration-200 bg-indigo-500 text-white hover:bg-indigo-600" data-group-by="none">None</button>
                    <button class="group-by-btn text-xs font-semibold px-4 py-2 rounded-full transition-colors duration-200 bg-gray-200 text-gray-600 hover:bg-gray-300" data-group-by="date">Date</button>
                    <button class="group-by-btn text-xs font-semibold px-4 py-2 rounded-full transition-colors duration-200 bg-gray-200 text-gray-600 hover:bg-gray-300" data-group-by="week">Week</button>
                    <button class="group-by-btn text-xs font-semibold px-4 py-2 rounded-full transition-colors duration-200 bg-gray-200 text-gray-600 hover:bg-gray-300" data-group-by="month">Month</button>
                    <button class="group-by-btn text-xs font-semibold px-4 py-2 rounded-full transition-colors duration-200 bg-gray-200 text-gray-600 hover:bg-gray-300" data-group-by="year">Year</button>
                </div>
            </div>
        </aside>

        {/* Main Content */}
        <div class="flex-1 flex flex-col p-6 md:p-10">
            <header class="flex items-center justify-between mb-6 md:hidden py-4 px-6 bg-white shadow-md rounded-xl fixed top-24 left-4 right-4 z-40">
                <h1 class="text-xl font-extrabold text-indigo-600">Aspirasi Bedalo</h1>
                <button id="mobile-menu-btn" class="text-gray-600 hover:text-indigo-600 p-2">
                    <i class="fas fa-bars text-xl"></i>
                </button>
            </header>

            <div class="pb-6 border-b border-gray-200 mt-20 md:mt-0">
                <h2 class="text-3xl font-bold text-gray-900 leading-tight">Dashboard</h2>
                <p id="total-count" class="text-gray-500 mt-1 text-sm"></p>
            </div>

            <main class="flex-1 overflow-y-auto pt-8">
                <div id="aspirasi-container" class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {/* Skeletons will be injected here by JS */}
                </div>
            </main>
        </div>
    </div>

    {/* Notification Popup */}
    <div id="notification-popup" class="fixed bottom-4 left-1/2 -translate-x-1/2 bg-gray-900 text-white px-6 py-3 rounded-lg shadow-lg z-[1001] transition-opacity duration-300 opacity-0 pointer-events-none">
        Text copied to clipboard!
    </div>
    
    <Footer />
</Layout>

<style>
    /* ... (Your CSS styles remain the same) ... */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
    @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');

    .font-inter {
        font-family: 'Inter', sans-serif;
    }

    .loading-skeleton {
        animation: pulse 1.5s infinite ease-in-out;
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border-left: 5px solid transparent;
    }

    .card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        border-left-color: #6366f1; /* indigo-500 */
    }

    .sidebar {
        width: 280px;
        transition: transform 0.3s ease-in-out;
    }
    
    @media (max-width: 767px) {
        .sidebar {
            transform: translateX(-100%);
            z-index: 50;
        }
        .sidebar.active {
            transform: translateX(0);
        }
    }

    .overlay {
        z-index: 40;
        transition: opacity 0.3s ease-in-out;
    }
</style>

<script>
    // --- TYPE DEFINITIONS ---
    // CHANGE #1: Define the shape of our data. This helps TypeScript understand our objects.
    interface Aspirasi {
        "Timestamp": string;
        "Nama Lengkap": string;
        "No. Telepon / Email": string;
        "Subjek": string;
        "Pesan Aspirasi": string;
        [key: string]: any; // Allows for other potential properties from the sheet
    }

    type GroupByOption = 'none' | 'date' | 'week' | 'month' | 'year';
    
    // CHANGE #2: Extend the global Window interface to include our custom function.
    declare global {
        interface Window {
            copyToClipboard: (text: string) => Promise<void>;
        }
    }

    // --- SCRIPT INITIALIZATION ---
    // CHANGE #3: Wrap the entire logic in a DOMContentLoaded listener.
    // This ensures the HTML is fully loaded before we try to find elements.
    document.addEventListener('DOMContentLoaded', () => {
    
        // --- DOM Element Selection ---
        // CHANGE #4: Get all elements at the start and use Type Assertions (the 'as' keyword)
        // to tell TypeScript the specific type of each element.
        const aspirasiContainer = document.getElementById('aspirasi-container') as HTMLDivElement;
        const refreshButton = document.getElementById('refresh-button') as HTMLButtonElement;
        const searchInput = document.getElementById('search-input') as HTMLInputElement;
        const groupByButtons = document.querySelectorAll('.group-by-btn') as NodeListOf<HTMLButtonElement>;
        const loadingModal = document.getElementById('loading-modal') as HTMLDivElement;
        const totalCountElement = document.getElementById('total-count') as HTMLParagraphElement;
        const mobileMenuBtn = document.getElementById('mobile-menu-btn') as HTMLButtonElement;
        const sidebar = document.getElementById('sidebar') as HTMLElement;
        const sidebarOverlay = document.getElementById('sidebar-overlay') as HTMLDivElement;
        const sidebarCloseBtn = document.getElementById('sidebar-close-btn') as HTMLButtonElement;
        const notificationPopup = document.getElementById('notification-popup') as HTMLDivElement;
        
        // CHANGE #5: A single, robust check for all essential elements.
        // If any element is not found, the script will stop to prevent runtime errors.
        const essentialElements = [
            aspirasiContainer, refreshButton, searchInput, loadingModal, totalCountElement,
            mobileMenuBtn, sidebar, sidebarOverlay, sidebarCloseBtn, notificationPopup
        ];
        if (essentialElements.some(el => !el)) {
            console.error("Dashboard script failed: One or more essential DOM elements are missing.");
            return;
        }

        // --- Global State ---
        const scriptUrl = 'https://script.google.com/macros/s/AKfycbwSKLz61pECBMKyYqr72knvY9p65vt945pkmRPl9HPIyRjYRom3IgmInBrS8lMGfSst/exec';
        let fetchedData: Aspirasi[] = [];
        let currentGroupBy: GroupByOption = 'none';
        
        // --- Core Functions (with types added) ---
        function showLoading(show: boolean): void {
            loadingModal.classList.toggle('hidden', !show);
            loadingModal.classList.toggle('flex', show);
            refreshButton.disabled = show;
        }

        function showSkeleton(count: number = 4): void {
            let skeletonHtml = '';
            for (let i = 0; i < count; i++) {
                skeletonHtml += `
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200 loading-skeleton h-60">
                        <div class="h-4 bg-gray-200 rounded w-2/5 mb-2"></div>
                        <div class="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
                        <div class="h-4 bg-gray-200 rounded w-5/6 mb-4"></div>
                        <div class="mt-auto pt-4 border-t border-gray-100 flex-grow">
                            <div class="h-4 bg-gray-200 rounded w-1/2 mb-1"></div>
                            <div class="h-4 bg-gray-200 rounded w-1/3"></div>
                        </div>
                    </div>`;
            }
            aspirasiContainer.innerHTML = skeletonHtml;
        }

        function formatDate(timestamp: string): string {
            const date = new Date(timestamp);
            return date.toLocaleString('id-ID', {
                year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
            });
        }

        function getWeekNumber(d: Date): number {
            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
            d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            const weekNo = Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1) / 7);
            return weekNo;
        }

        function groupData(data: Aspirasi[], groupBy: GroupByOption): Record<string, Aspirasi[]> {
            if (groupBy === 'none') {
                return { 'All Aspirations': data };
            }

            const grouped: Record<string, Aspirasi[]> = {};
            data.forEach(item => {
                const date = new Date(item.Timestamp);
                let key: string = '';

                if (groupBy === 'date') {
                    key = date.toLocaleDateString('id-ID', { day: '2-digit', month: 'long', year: 'numeric' });
                } else if (groupBy === 'week') {
                    const weekNumber = getWeekNumber(date);
                    key = `Week ${weekNumber}, ${date.getFullYear()}`;
                } else if (groupBy === 'month') {
                    key = date.toLocaleDateString('id-ID', { month: 'long', year: 'numeric' });
                } else if (groupBy === 'year') {
                    key = date.getFullYear().toString();
                }

                if (!grouped[key]) {
                    grouped[key] = [];
                }
                grouped[key].push(item);
            });
            return grouped;
        }

        async function copyToClipboard(text: string): Promise<void> {
            try {
                await navigator.clipboard.writeText(text);
                notificationPopup.textContent = 'Contact information copied!';
            } catch (err) {
                console.error('Failed to copy text: ', err);
                notificationPopup.textContent = 'Failed to copy text.';
            } finally {
                notificationPopup.classList.remove('opacity-0', 'pointer-events-none');
                notificationPopup.classList.add('opacity-100');
                setTimeout(() => {
                    notificationPopup.classList.remove('opacity-100');
                    notificationPopup.classList.add('opacity-0', 'pointer-events-none');
                }, 2000);
            }
        }

        window.copyToClipboard = copyToClipboard;

        function renderData(groupedData: Record<string, Aspirasi[]>): void {
            aspirasiContainer.innerHTML = '';
            if (Object.keys(groupedData).length === 0 || fetchedData.length === 0) {
                aspirasiContainer.innerHTML = `<div class="col-span-full text-center py-10"><p class="text-gray-500 text-lg">No data found.</p></div>`;
                return;
            }

            const groupKeys = Object.keys(groupedData).sort((a, b) => {
                if (currentGroupBy === 'none') return 0;
                // Sorting logic is complex and depends on string formats, so leaving as-is but could be improved.
                // Assuming the string formats are consistent and comparable.
                if (currentGroupBy === 'date') return new Date(b.split('/').reverse().join('-')).getTime() - new Date(a.split('/').reverse().join('-')).getTime();
                if (currentGroupBy === 'year') return Number(b) - Number(a);
                return b.localeCompare(a, undefined, { numeric: true });
            });
            
            groupKeys.forEach(key => {
                const items = groupedData[key];
                items.sort((a, b) => new Date(b.Timestamp).getTime() - new Date(a.Timestamp).getTime());
                
                let groupHtml = `
                    <div class="col-span-full mb-6">
                        <div class="flex items-center space-x-3 text-gray-700 mb-4">
                            <i class="fas fa-folder text-lg text-pink-500"></i>
                            <h3 class="text-xl font-bold">${key} (${items.length})</h3>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">`;
                
                items.forEach(item => {
                    const namaLengkap = item['Nama Lengkap'] || 'N/A';
                    const noTelepon = item['No. Telepon / Email'] || 'N/A';
                    const subjek = item['Subjek'] || 'N/A';
                    const pesanAspirasi = item['Pesan Aspirasi'] || 'No message provided.';
                    const timestamp = item['Timestamp'] ? formatDate(item['Timestamp']) : 'N/A';
                    
                    groupHtml += `
                        <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200 flex flex-col card">
                            <div class="flex items-center justify-between text-xs text-gray-400 mb-3">
                                <span>${timestamp}</span>
                                <i class="fas fa-comment-alt text-indigo-400"></i>
                            </div>
                            <h4 class="text-lg font-bold text-gray-800 mb-2 leading-tight">${subjek}</h4>
                            <p class="text-sm text-gray-600 mb-4 flex-grow whitespace-pre-wrap break-words">${pesanAspirasi}</p>
                            <div class="w-full h-px bg-gray-200 my-4"></div>
                            <div class="mt-auto flex flex-col gap-2">
                                <div class="flex items-center text-sm text-gray-600 font-semibold">
                                    <i class="fas fa-user text-indigo-500 mr-2"></i>
                                    By: ${namaLengkap}
                                </div>
                                <button class="flex items-center text-sm text-gray-500 hover:text-indigo-600 transition-colors" onclick="copyToClipboard('${noTelepon}')">
                                    <i class="fas fa-phone-alt text-indigo-500 mr-2"></i>
                                    Contact: ${noTelepon}
                                </button>
                            </div>
                        </div>`;
                });

                groupHtml += `</div></div>`;
                aspirasiContainer.innerHTML += groupHtml;
            });
        }

        function filterAndRenderData(): void {
            const searchTerm = searchInput.value.toLowerCase();
            const filteredData = fetchedData.filter(item => {
                return Object.values(item).some(value => 
                    String(value).toLowerCase().includes(searchTerm)
                );
            });
            totalCountElement.textContent = `Showing ${filteredData.length} of ${fetchedData.length} aspirations`;
            const groupedData = groupData(filteredData, currentGroupBy);
            renderData(groupedData);
        }

        async function fetchAndRenderData(): Promise<void> {
            showSkeleton();
            showLoading(true);
            try {
                const response = await fetch(scriptUrl);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                fetchedData = await response.json();
                filterAndRenderData();
            } catch (error) {
                console.error('Error fetching aspirasi data:', error);
                aspirasiContainer.innerHTML = `<div class="col-span-full text-center py-10"><p class="text-red-500 text-lg">Failed to load data. Please try again later.</p></div>`;
            } finally {
                showLoading(false);
            }
        }

        // --- Event Listeners ---
        refreshButton.addEventListener('click', () => {
            fetchAndRenderData();
            if (window.innerWidth < 768) {
                closeSidebar();
            }
        });

        searchInput.addEventListener('input', filterAndRenderData);

        groupByButtons.forEach(button => {
            button.addEventListener('click', (e: MouseEvent) => {
                // Cast the event target to an HTML Element to safely access dataset
                const target = e.target as HTMLButtonElement;
                const newGroupBy = target.dataset.groupBy as GroupByOption;
                
                if (currentGroupBy === newGroupBy) return;
                
                groupByButtons.forEach(btn => {
                    const isSelected = btn === target;
                    btn.classList.toggle('bg-indigo-500', isSelected);
                    btn.classList.toggle('text-white', isSelected);
                    btn.classList.toggle('bg-gray-200', !isSelected);
                    btn.classList.toggle('text-gray-600', !isSelected);
                });
                
                currentGroupBy = newGroupBy;
                filterAndRenderData();
                if (window.innerWidth < 768) {
                    closeSidebar();
                }
            });
        });

        function closeSidebar(): void {
            sidebar.classList.remove('active');
            sidebarOverlay.classList.add('opacity-0', 'pointer-events-none');
            // No need for a timeout to add 'hidden' as mobileMenuBtn adds 'active' which makes it visible.
        }

        mobileMenuBtn.addEventListener('click', () => {
            sidebar.classList.add('active');
            sidebarOverlay.classList.remove('opacity-0', 'pointer-events-none');
        });

        sidebarOverlay.addEventListener('click', closeSidebar);
        sidebarCloseBtn.addEventListener('click', closeSidebar);

        // --- Initial Load ---
        fetchAndRenderData();
    });
</script>