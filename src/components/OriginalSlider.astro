---
export interface Props {
  umkmItems: any[];
}
const { umkmItems } = Astro.props;
---

<div class="relative">
  <div id="slider-wrapper" class="overflow-hidden">
    <div id="umkm-slider" class="flex">
      {umkmItems.map(item => (
        <div class="umkm-card w-full lg:w-1/3 flex-shrink-0 p-4">
          <div class="bg-white h-full rounded-lg shadow-lg overflow-hidden flex flex-col">
            <img src={item.gambarUrl} alt={item.altText} class="w-full h-48 object-cover" />
            <div class="p-6 flex flex-col flex-grow">
              <h3 class="text-xl font-bold text-gray-800 mb-2">{item.judul}</h3>
              <p class="text-gray-600 mb-4 text-sm flex-grow">{item.deskripsi}</p>
              <div class="flex justify-between items-center mt-auto">
                <span class="text-lg font-bold text-green-600">{item.harga}</span>
                <a href={item.kontakLink} target="_blank" class="bg-blue-600 text-white text-sm px-4 py-2 rounded-md hover:bg-blue-700 transition duration-300">Hubungi</a>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>
<div class="mt-8 flex justify-center items-center gap-4">
  <button id="prev-btn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold p-3 rounded-full flex items-center justify-center w-12 h-12"><i class="fas fa-chevron-left"></i></button>
  <div id="dot-indicator" class="flex items-center gap-2"></div>
  <button id="next-btn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold p-3 rounded-full flex items-center justify-center w-12 h-12"><i class="fas fa-chevron-right"></i></button>
</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Fungsi untuk menginisialisasi slider
    function setupSlider() {
      const slider = document.getElementById('umkm-slider');
      if (!slider || slider.children.length === 0) return;

      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const dotContainer = document.getElementById('dot-indicator');
      const originalCards = Array.from(slider.querySelectorAll('.umkm-card'));
      
      if (originalCards.length === 0) return;

      let cardsPerView;
      let totalSlides;
      let slideWidth;
      let currentIndex;
      let isTransitioning = false;

      function configureSlider() {
        isTransitioning = true;
        // Adjusted to check window.innerWidth directly as it runs on the client
        cardsPerView = window.innerWidth < 1024 ? 1 : 3;
        totalSlides = Math.ceil(originalCards.length / cardsPerView);
        const sliderWrapper = document.getElementById('slider-wrapper');
        if (!sliderWrapper) return;
        slideWidth = sliderWrapper.clientWidth;
        
        if(originalCards.length <= cardsPerView) {
            if(prevBtn) prevBtn.style.display = 'none';
            if(nextBtn) nextBtn.style.display = 'none';
            if(dotContainer) dotContainer.style.display = 'none';
            slider.style.transform = `translateX(0px)`;
            slider.innerHTML = '';
            originalCards.forEach(card => slider.appendChild(card));
            isTransitioning = false;
            return;
        }
        
        if(prevBtn) prevBtn.style.display = 'flex';
        if(nextBtn) nextBtn.style.display = 'flex';
        if(dotContainer) dotContainer.style.display = 'flex';

        const clonesStart = originalCards.slice(-cardsPerView).map(card => card.cloneNode(true));
        const clonesEnd = originalCards.slice(0, cardsPerView).map(card => card.cloneNode(true));
        
        slider.innerHTML = '';
        clonesStart.forEach(clone => slider.appendChild(clone));
        originalCards.forEach(card => slider.appendChild(card.cloneNode(true)));
        clonesEnd.forEach(clone => slider.appendChild(clone));

        currentIndex = cardsPerView;
        positionSlider(false);
        updateDots();
        isTransitioning = false;
      }

      function positionSlider(withTransition = true) {
        const offset = -currentIndex * (slideWidth / cardsPerView);
        slider.style.transition = withTransition ? 'transform 0.5s ease-in-out' : 'none';
        slider.style.transform = `translateX(${offset}px)`;
      }

      function updateDots() {
        dotContainer.innerHTML = '';
        if(totalSlides <= 1) return;

        const currentSlide = Math.floor(((currentIndex - cardsPerView + originalCards.length) % originalCards.length) / cardsPerView);
        
        for (let i = 0; i < totalSlides; i++) {
            const dot = document.createElement('button');
            dot.classList.add('w-3', 'h-3', 'rounded-full', 'transition-colors', 'duration-300');
            dot.classList.toggle('bg-blue-600', i === currentSlide);
            dot.classList.toggle('bg-gray-300', i !== currentSlide);
            dot.classList.toggle('hover:bg-gray-400', i !== currentSlide);
            dot.addEventListener('click', () => {
                if (isTransitioning) return;
                currentIndex = i * cardsPerView + cardsPerView;
                positionSlider();
                updateDots();
            });
            dotContainer.appendChild(dot);
        }
      }
      
      function shiftSlide(direction) {
        if (isTransitioning) return;
        isTransitioning = true;
        
        currentIndex += direction * cardsPerView;
        positionSlider();
        updateDots();
      }

      slider.addEventListener('transitionend', () => {
        const allCardsInSlider = slider.querySelectorAll('.umkm-card');
        const totalClonedCards = originalCards.length + cardsPerView;
        
        if (currentIndex < cardsPerView) {
            currentIndex = totalClonedCards + (currentIndex - cardsPerView);
            positionSlider(false);
        } else if (currentIndex >= totalClonedCards) {
            currentIndex = (currentIndex - totalClonedCards) + cardsPerView;
            positionSlider(false);
        }
        isTransitioning = false;
      });

      nextBtn.addEventListener('click', () => shiftSlide(1));
      prevBtn.addEventListener('click', () => shiftSlide(-1));
      window.addEventListener('resize', configureSlider);

      configureSlider();
    }

    // Call the setup function to initialize the slider
    setupSlider();
  });
</script>